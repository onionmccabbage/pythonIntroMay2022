Python Training May 2022
========================

Toby Dussek
9:30 start
11:00 coffee
12:30 lunch
3:00 tea
4:30 end

Monday
> Welcome
> where to write code: immediate and module
  Pycharm or VSCode or ...
> overview of Python 3 (and Python 2)
- architecture, structure, and professional code best practice
> print() and input() also repr
> maths operators and data types
> the if statement for conditional logic
> while loop, break and pass
> indentation
> immutable strings
> how to convert a list back into a string with join()
> print formatting
> square bracket notation for iterable collections
- memory efficiency
- identifiers
> boolean True and False
- type and type conversion, also isinstance() and isnumeric()
> validate input before casting it
- is there a difference: .isnumeric. isdigit and .isdecimal  see https://datagy.io/python-isdigit/
- string manipulation
> Python indent syntax
- Lists, Tuples and nested collections
> after lunch review exercise
> dictionaries (non-numeric indexed iterable collections)
- import, pip, libraries and modules
> very big numeric values
> looping with 'for'
> range, generators and comprehensions
> set comprehension, list compresension, dictionary comprehension

Tuesday
> quick review of where we got to
> by-reference or by-value
> other kinds of Python: cpython is the default - also jython ipython ironpython
> functions, *args, **kwargs  
> custom generator and yield
> regex
> to add libraries to python:
  > python -m ensurepip
  > python â€“m pip install requests
    (or any other library you need)
> requests (if time)
> overview of testing
> strings with triple quotes
> architecture: modules __init__.py and __name__ == '__main__'
> exception handling
> review exercise
  NB Python 2 input: use raw_input()
> import path.... (also max size)
> File input and output
> read and write binary files (bytes)

Wednesday
> brief review so far
> functions live in classes, which live in modules which live in packages
> moving from Py2 to Py3 -- just how old is Python?... and how come its suddenly popular
  https://docs.python.org/3/howto/pyporting.html
> PEP8 style guide
> global and local scope 
> string formatting syntax
> data modelling structures - use built in structures until they do not suit the purpose (then use classes)
> Objects and Classes (OOP)
> get/set as property decorators @property
> name mangling (__)
    we should use getter/setter to prevent direct access, 
    but we can ALWAYS add arbitrary properies and methods to a class
> properties, methods, __str__
> intrinsic attributes: __doc__ etc.
> documentation strings (docstring) for classes
> special operators and overriding
> inheritance
> composition, static and class methods
> review exercise
> how to format with certain dp
> debug tools
> virtual environments
  https://www.python.org/dev/peps/pep-0405/
- where to go from here:
  https://pynative.com/python-exercises-with-solutions/
  the next courses: advanced python then further advanced python
- end of course feedback
   https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f?Type=ILT&ID=LZU1500463&OID=500828&Title=Programming%20in%20Python&Owner=Sumit%20Lakhwan





Links
- Python official site https://python.org
- PEP8 style guide https://www.python.org/dev/peps/pep-0008/
- online Python interpreter https://repl.it/languages/Python3